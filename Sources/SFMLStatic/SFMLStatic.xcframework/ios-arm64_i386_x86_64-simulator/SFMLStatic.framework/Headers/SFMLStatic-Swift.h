#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef SFMLSTATIC_SWIFT_H
#define SFMLSTATIC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SFMLStatic",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSString;
@class NSNumber;

/// All accessiblity elements found in the <code>SFMLView</code> will be subclasses of
/// <code>SFMLAccessibilityElement</code>.
SWIFT_CLASS("_TtC10SFMLStatic24SFMLAccessibilityElement")
@interface SFMLAccessibilityElement : UIAccessibilityElement
/// The accessibility label which uses the <code>accessibilityLabel</code> property and appends the
/// return value of the delegate’s <code>sfmlAccessibilityLabelPrefix(element:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// The accessibility value which uses the <code>value</code> property and appends the
/// return value of the delegate’s <code>sfmlAccessibilityValue(element:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityValue;
/// The accessibility hint which uses the <code>hint</code> property and appends the
/// return value of the delegate’s <code>flyerViewItemAccessibilityHint(itemID:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityHint;
/// Default initializer.
- (nonnull instancetype)initWithAccessibilityContainer:(id _Nonnull)container OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>SFMLFlyerViewAccessibilityElementDelegate</code> defines methods that allow
/// further customization of accessiblity elements found in the <code>SFMLView</code>.
SWIFT_PROTOCOL("_TtP10SFMLStatic32SFMLAccessibilityElementDelegate_")
@protocol SFMLAccessibilityElementDelegate <NSObject>
/// An additional accessibility hint if desired which is appended to the default hint.
- (NSString * _Nullable)sfmlAccessibilityHintWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// An additional accessibility value if desired which is appended to the default value.
- (NSString * _Nullable)sfmlAccessibilityValueWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// A prefix that’s added onto the accessibility label if needed
- (NSString * _Nullable)sfmlAccessibilityLabelPrefixWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end

enum SFMLActionType : NSInteger;
@class NSURL;

/// An object which encapsulates the information needed to perform
/// an action when an item is of source type Action
SWIFT_CLASS("_TtC10SFMLStatic10SFMLAction")
@interface SFMLAction : NSObject
@property (nonatomic, readonly) enum SFMLActionType type;
@property (nonatomic, readonly, copy) NSURL * _Nullable ttmURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SFMLActionType, open) {
  SFMLActionTypeLink = 0,
/// Action opening a link
  SFMLActionTypeNoop = 1,
};

@protocol SFMLViewAnalyticsDelegate;

/// A configuration and convenience class for handling analytics in the framework.
/// This class implements <code>SFMLViewDelegate</code> and <code>SFMLViewWayfinderDelegate</code> and has
/// internal timers and logic to decide when to trigger <code>SFMLViewAnalyticsDelegate</code>
/// events.
SWIFT_CLASS("_TtC10SFMLStatic13SFMLAnalytics")
@interface SFMLAnalytics : NSObject
/// The analytics delegate.
@property (nonatomic, weak) id <SFMLViewAnalyticsDelegate> _Nullable delegate;
/// The amount of time to wait after the view has settled before triggering
/// an item impressions analytics event.
@property (nonatomic) NSTimeInterval itemImpressionsDelay;
/// The amount of time to wait after the view has settled before triggering
/// an item viewable impressions analytics event.
@property (nonatomic) NSTimeInterval itemViewableImpressionsDelay;
/// The amount time to wait after the view has settled before triggering
/// an engaged visit analytics event. If another event (e.g. tapping on an item,
/// manually scrolling the view, etc.) occurs, the timer using this delay is
/// cancelled and the engaged visit event is immediately fired.
@property (nonatomic) NSTimeInterval engagedVisitDelay;
/// Track an engaged visit for the SFMLView associated with this instance of SFMLAnalytics
- (void)trackEngagedVisit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class StorefrontSFMLView;

/// Objects conforming to this protocol are notified of wayfinder-related events.
SWIFT_PROTOCOL("_TtP10SFMLStatic25SFMLViewWayfinderDelegate_")
@protocol SFMLViewWayfinderDelegate
/// Called when the wayfinder is about to appear.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewWayfinderWillAppear:(StorefrontSFMLView * _Nonnull)storefrontView;
/// Called when the wayfinder did appear.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
/// \param category The category that is selected.
///
- (void)storefrontSFMLViewWayfinderDidAppear:(StorefrontSFMLView * _Nonnull)storefrontView highlightedCategory:(NSString * _Nullable)category;
/// Called when a category in the wayfinder has been selected by the user.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
/// \param category The category that is selected.
///
/// \param index The index of the selected category.
///
- (void)storefrontSFMLView:(StorefrontSFMLView * _Nonnull)storefrontView didSelectWayfinderCategory:(NSString * _Nonnull)category categoryIndex:(NSInteger)index;
/// Called when the user begins to scroll the storefront using the wayfinder
/// scroll button.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewDidStartWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// Called when the user finishes scrolling the storefront using the wayfinder
/// scroll button.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewDidEndWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
@end


@interface SFMLAnalytics (SWIFT_EXTENSION(SFMLStatic)) <SFMLViewWayfinderDelegate>
/// Note on this implementation:
/// When the wayfinder quick scroll is being used, it is setting the content
/// offset manually and the initial setting makes the scrollView call
/// <code>didEndDecelerating</code> which in turn starts tracking item impressions.
/// We stop the impressions timer so if the user starts using the wayfinder
/// quick scroll (which opens the wayfinder list), it stops any impressions
/// timer in progress which if fired would have erroneously fired an impressions
/// beacon when there hasn’t been <dwell time> seconds of dwell time.
/// If not using this implementation of analytics (i.e. not setting the delegate
/// of the <code>Analytics</code> object), make sure to keep this in mind.
- (void)storefrontSFMLViewWayfinderWillAppear:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLViewWayfinderDidAppear:(StorefrontSFMLView * _Nonnull)storefrontView highlightedCategory:(NSString * _Nullable)category;
/// :nodoc:
- (void)storefrontSFMLViewDidEndWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLViewDidStartWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLView:(StorefrontSFMLView * _Nonnull)storefrontView didSelectWayfinderCategory:(NSString * _Nonnull)category categoryIndex:(NSInteger)index;
@end

@class SFMLView;
@class SFMLItemAttributes;
@class SFMLAnnotationView;
@class SFMLItemID;

/// The <code>SFMLViewDelegate</code> protocol defines methods that allow you to handle
/// certain <code>SFMLView</code> events, such as when an item is tapped or long-pressed.
/// It also forwards some <code>UIScrollViewDelegate</code> methods in case they are needed.
SWIFT_PROTOCOL("_TtP10SFMLStatic16SFMLViewDelegate_")
@protocol SFMLViewDelegate
/// Calls the delegate when the view’s visibility has changed.
/// Visibility is dependent on the <code>isVisible</code> property being set by the user. It
/// is not automatically computed.
/// Internally, other objects (such as analytics objects) listen for visibility events.
/// \param view The <code>SFMLView</code> whose visibility changed.
///
/// \param isVisible Whether the view is visible or not. <code>true</code> is only
/// returned if the has been loaded (<code>isLoaded</code>) and is visible `isVisible). Both
/// are public properties of the view.
///
- (void)sfmlViewVisibilityChanged:(SFMLView * _Nonnull)view isVisible:(BOOL)isVisible;
/// Calls the delegate when an item is single-tapped.
/// \param view The <code>SFMLView</code> that was tapped.
///
/// \param attributes The attributes of the item.
///
- (void)sfmlView:(SFMLView * _Nonnull)view didTapItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// Calls the delegate when an item is long-pressed.
/// \param view The <code>SFMLView</code> that was long-pressed.
///
/// \param attributes An object containing the attributes of the item.
///
- (void)sfmlView:(SFMLView * _Nonnull)view didLongPressItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// Calls the delegate when the <code>SFMLView</code> is double-tapped.
/// \param view The <code>SFMLView</code> that was double-tapped.
///
/// \param point The point in <code>SFMLView</code> space where the double-tap occurred.
///
/// \param didZoomIn Whether or not the <code>SFMLView</code> zoomed in after the double-tap.
///
- (void)sfmlView:(SFMLView * _Nonnull)view doubleTappedPoint:(CGPoint)point didZoomIn:(BOOL)didZoomIn;
@optional
/// Calls the delegate when an annotation view is needed for a clipping.
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)clippingAnnotationViewForSFMLView:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calls the delegate when an annotation view is needed for a coupon.
/// \param id The ID of the item the annotation is for.
///
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)couponAnnotationViewFor:(SFMLItemID * _Nonnull)id in:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calls the delegate when an annotation view is needed for a coupon.
/// NOTE: This method is deprecated. Please use <code>couponAnnotationView(for:in:)</code>.
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)couponAnnotationViewForSFMLView:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("Deprecated. Please use `couponAnnotationView(for:in:)`.");
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidScroll(_:)</code>.
- (void)sfmlViewDidScroll:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidScrollToTop(_:)</code>.
- (void)sfmlViewDidScrollToTop:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewWillEndDragging(_:withVelocity:targetContentOffset)</code>.
- (void)sfmlViewWillEndDragging:(SFMLView * _Nonnull)view withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndDragging(_:willDecelerate:)</code>.
- (void)sfmlViewDidEndDragging:(SFMLView * _Nonnull)view willDecelerate:(BOOL)decelerate;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndScrollingAnimation(_:)</code>.
- (void)sfmlViewDidEndScrollingAnimation:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidZoom(_:)</code>.
- (void)sfmlViewDidZoom:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndZooming(_:with:atScale:)</code>.
- (void)sfmlViewDidEndZooming:(SFMLView * _Nonnull)view atScale:(CGFloat)scale;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndDecelerating(_:)</code>.
- (void)sfmlViewDidEndDecelerating:(SFMLView * _Nonnull)view;
@end


@interface SFMLAnalytics (SWIFT_EXTENSION(SFMLStatic)) <SFMLViewDelegate>
/// :nodoc:
- (void)sfmlViewVisibilityChanged:(SFMLView * _Nonnull)view isVisible:(BOOL)isVisible;
/// :nodoc:
- (void)sfmlViewDidScrollToTop:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndDecelerating:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndScrollingAnimation:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndZooming:(SFMLView * _Nonnull)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)sfmlViewDidEndDragging:(SFMLView * _Nonnull)view willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view didTapItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view didLongPressItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view doubleTappedPoint:(CGPoint)point didZoomIn:(BOOL)didZoomIn;
/// :nodoc:
- (void)sfmlViewDidZoom:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidScroll:(SFMLView * _Nonnull)view;
@end

@class NSCoder;

/// Annotation views representing <code>SFMLAnnotation</code>s should be subclasses of this view.
/// Animations for insertion/removal can be implemented if desired.
SWIFT_CLASS("_TtC10SFMLStatic18SFMLAnnotationView")
@interface SFMLAnnotationView : UIView
/// Called when this annotation view is added. Subclass can override.
/// \param animated Whether insertion of the annotation view is animated.
///
- (void)insertAnnotationViewWithAnimated:(BOOL)animated;
/// Called when this annotation view is removed. It will not be
/// called if this annotation view is removed offscreen. Subclasses can override.
/// The given completion block must be called at the end of the implementation.
/// \param animated Whether insertion of the annotation view is animated.
///
- (void)removeAnnotationViewWithAnimated:(BOOL)animated;
/// Called when this view is being zoomed. This allows an annotation to maintain
/// whatever screen size may be appropriate even while being zoomed.
/// \param zoomScale The zoomScale of the containing view.
///
- (void)handleZoomChangeWithZoomScale:(CGFloat)zoomScale;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10SFMLStatic15SFMLBorderLayer")
@interface SFMLBorderLayer : CAShapeLayer
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// This method is responsible for updating the border’s path when the view bounds change (e.g. on device rotation)
- (void)updateBorderPathWithBounds:(CGRect)bounds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>SFMLAccessibilityElement</code> subclass that is used for flyer view item
/// accessibility elements.
SWIFT_CLASS("_TtC10SFMLStatic33SFMLFlyerViewAccessibilityElement")
@interface SFMLFlyerViewAccessibilityElement : SFMLAccessibilityElement
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAccessibilityContainer:(id _Nonnull)container SWIFT_UNAVAILABLE;
@end

@class UIImage;

/// Objects conforming to this protocol are responsible for loading images with
/// a given URL and calling the given completion block.
/// Each image loading operation should also be able to be cancelled.
SWIFT_PROTOCOL("_TtP10SFMLStatic21SFMLImageDownloadTask_")
@protocol SFMLImageDownloadTask <NSObject>
/// Cancels the image downloading task.
- (void)cancel;
/// The image download task should perform a network operation to download an image
/// with the given URL. On completion it should call the given <code>completion</code> block.
/// \param url The image URL to load.
///
/// \param completion The completion block to call after the network
/// operation has finished.
///
- (void)loadImageWithURL:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end


/// Objects conforming to this protocol are responsible for providing new instances
/// of image downloading tasks.
SWIFT_PROTOCOL("_TtP10SFMLStatic29SFMLImageDownloadTaskProvider_")
@protocol SFMLImageDownloadTaskProvider <NSObject>
/// This method should return a new instance of an object conforming to
/// <code>SFMLImageDownloadTask</code>. The object returned cannot be nil.
- (id <SFMLImageDownloadTask> _Nonnull)newImageDownloadTask SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10SFMLStatic16SFMLImageLoading_")
@protocol SFMLImageLoading <NSObject>
@property (nonatomic, weak) id <SFMLImageDownloadTaskProvider> _Nullable imageDownloadTaskProvider;
@end


/// An object that encapsulates information about an item.
SWIFT_CLASS("_TtC10SFMLStatic18SFMLItemAttributes")
@interface SFMLItemAttributes : NSObject
/// The item’s ID.
@property (nonatomic, readonly, strong) SFMLItemID * _Nonnull itemID;
/// The action for when the itemID is of source == Action
@property (nonatomic, readonly, strong) SFMLAction * _Nullable action;
/// The target anchor ID of this item. This value can be passed to <code>SFMLView</code>’s
/// <code>scrollToAnchor(anchorID:animated:)</code> method to scroll to the item with
/// this value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable targetAnchorID;
/// A wrapper object containing arbitrary key/value string pairs.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull payload;
/// Default initializer.
/// \param itemID The <code>SFMLItemID</code> of the item.
///
/// \param action The <code>SFMLAction</code> of the item.
///
/// \param targetAnchorID The anchor ID that this item targets.
///
/// \param payload The data payload of this item.
///
- (nonnull instancetype)initWithItemID:(SFMLItemID * _Nonnull)itemID action:(SFMLAction * _Nullable)action targetAnchorID:(NSNumber * _Nullable)targetAnchorID payload:(NSDictionary<NSString *, NSString *> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SFMLSource : NSInteger;

SWIFT_CLASS("_TtC10SFMLStatic10SFMLItemID")
@interface SFMLItemID : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceID;
@property (nonatomic, readonly) enum SFMLSource source;
@property (nonatomic, readonly, copy) NSString * _Nullable globalID;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithSourceID:(NSString * _Nonnull)sourceID source:(enum SFMLSource)source globalID:(NSString * _Nullable)globalID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A type of item.
typedef SWIFT_ENUM(NSInteger, SFMLSource, open) {
/// An item whose source is a flyer.
  SFMLSourceFlyer = 0,
/// An item whose source is online (ecom). Differs from <code>ecomSearch</code> in that this one’s source-id is expected to be a Global ID.
  SFMLSourceEcom = 1,
/// An item whose source is online (ecom). Differs from <code>ecom</code> in that this one’s source-id is expected to be a legacy ID.
  SFMLSourceEcomSearch = 2,
/// An item whose source is a merchant item
  SFMLSourceMerchantItem = 3,
/// An item whose source is a coupon
  SFMLSourceCoupon = 4,
/// An item whose source is a digital offer
  SFMLSourceOffer = 5,
/// An item whose source is action
  SFMLSourceAction = 6,
/// An item whose source is advertisement
  SFMLSourceAdvertisement = 7,
};

@class NSData;
@protocol UIInteraction;

/// A view that takes SFML data and displays it. It owns a <code>UIScrollView</code> and provides
/// some forwarded scroll view delegate methods should the user need them.
SWIFT_CLASS("_TtC10SFMLStatic8SFMLView")
@interface SFMLView : UIView
/// The UUID for this SFML document. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable uuid;
/// The storefront version.
@property (nonatomic, readonly, copy) NSString * _Nullable version;
/// The storefront’s content hash. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable contentHash;
/// The single, external delegate of the <code>SFMLView</code> which is called to act on
/// certain events like tapping on an item.
@property (nonatomic, weak) id <SFMLViewDelegate> _Nullable delegate;
/// The accessibility delegate. Implement to be able to return custom
/// accessibility hints or values.
@property (nonatomic, weak) id <SFMLAccessibilityElementDelegate> _Nullable accessibilityDelegate;
/// A mapping of <code>SFMLItemID</code>s to <code>SFMLItemAttribute</code>s.
@property (nonatomic, readonly, copy) NSDictionary<SFMLItemID *, SFMLItemAttributes *> * _Nonnull itemIDAttributes;
/// A set containing all the item IDs in the SFML document. Note that this is
/// a computed value. Read-only.
@property (nonatomic, readonly, copy) NSSet<SFMLItemID *> * _Nonnull itemIDs SWIFT_DEPRECATED_MSG("\n  This is an inefficient property that will be removed in a future version. Use `itemIDAttributes` instead.\n  ");
/// The size of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGSize viewportSize;
/// The visible bounds of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGRect visibleBounds;
/// The content offset of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGPoint contentOffset;
/// The content size of the internal scrollview. This can be set to override the internal
/// content size calculated by the scroll view.
@property (nonatomic) CGSize contentSize;
/// The zoom scale of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGFloat zoomScale;
/// The content inset of the internal scrollView.
@property (nonatomic) UIEdgeInsets contentInset;
/// The percentage of the content that the current contentOffset’s y point is at.
/// This can be used to scroll to a certain percentage of the content
/// (i.e. on size class/rotation changes to maintain the content offset before the change).
@property (nonatomic) CGFloat contentOffsetPercentage;
/// Whether the SFML has finished loading. Read-only.
@property (nonatomic, readonly) BOOL isLoaded;
/// A flag which mainly affects whether analytics events on the <code>StorefrontSFMLView</code>
/// subclass are correctly triggered. This flag exists on the super class so
/// its callback can be bundled into <code>SFMLViewDelegate</code>.
/// It is the responsibility of the developer to set this flag appropriately.
/// Changing this value is only functional if <code>isLoaded</code> is <code>true</code> (this is
/// guarded internally so it is not necessary to check it manually).
/// <code>isVisible</code> should be <code>true</code> when the view is on screen (<code>viewDidAppear(_:)</code> and <code>viewDidLoad</code>,
/// when the app becomes active and it is the front-most view) and it should be
/// <code>false</code> when the view leaves the screen (<code>viewWillDisappear(_:)</code> or the app
/// goes into the background.
@property (nonatomic) BOOL isVisible;
/// The scroll view’s main view and the single ancestor of all of the SFML
/// element views. It is used to determine content size of the scroll view
/// and all accessible elements are stored in this view’s
/// <code>accessibilityElements</code> property.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// The name of a font used any native UI components in the SFML. It is assumed that
/// the font has been bundled with the application and registered in its plist.
/// Components affected: item grid labels, collapsible layout button, wayfinder category buttons
@property (nonatomic, copy) NSString * _Nullable customFontName;
/// Set this to true if you want the storefront to utilize the default clipping annotation
/// (a yellow circle). By default, this bool is set to false, and you will be expected to provide
/// a SFMLAnnotationView subclass to the appropriate delegate method if you wish to render a
/// clipping annotation.
@property (nonatomic) BOOL shouldUseDefaultClippingAnnotation;
/// Whether the view should track accessibility focus events. The value of
/// this property mirrors <code>isVisible</code> and is updated automatically.
/// You may also manually change this value if desired depending on the use
/// case, however note that it will be overridden the next time <code>isVisible</code>
/// changes.
/// An example use case for updating it manually can be if you are displaying
/// a custom view on top of <code>SFMLView</code> where <code>isVisible</code> wouldn’t be set to
/// <code>false</code> but business logic dictates that accessibility elements on
/// <code>SFMLView</code> should not interactable. In a case like this, you can manually
/// set <code>shouldTrackAccessibilityFocus</code> to <code>false</code> before displaying the
/// custom view so the last tracked element remains accurate. Upon dismissal
/// of this temporary view, you may then call
/// <code>restoreFocusOnPreviouslyFocusedAccessibilityElement()</code> to restore focus
/// on the last accessibility element focused before presentation of the
/// temporary view.
/// If restoring the last focused accessibility element UX is not desired,
/// simply never call <code>restoreFocusOnPreviouslyFocusedAccessibilityElement()</code>.
@property (nonatomic) BOOL shouldTrackAccessibilityFocus;
/// Default initializer.
/// \param imageDownloadTaskProvider An object conforming to the
/// <code>SFMLImageDownloadTaskProvider</code> protocol which is responsible for providing
/// image download tasks. NOTE: This is an unowned property.
///
- (nonnull instancetype)initWithImageDownloadTaskProvider:(id <SFMLImageDownloadTaskProvider> _Nonnull)imageDownloadTaskProvider OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// This method takes the given SFML <code>Data</code> and attempts to parse and render it.
/// Note: if this method is called multiple times on the same instance, analytics events such as EV +
/// open will fire again. The onus is on the client application to de-dupe as needed (this SDK makes no
/// assumptions about the uniqueness of the content it is potentially re-loading).
/// \param sfml SFML in the form of <code>Data</code>.
///
/// \param headerView A view that can be rendered above the SFML document.
///
/// \param footerView A view that can be rendered below the SFML document.
///
/// \param titlePreload A block that is called once the title of the document is parsed.
/// This is to allow the title to be displayed before the document is completely rendered.
///
/// \param completion A completion block that lets the user know when
/// rendering is complete or if there was an error encountered.
///
- (void)loadWithSfml:(NSData * _Nonnull)sfml headerView:(UIView * _Nullable)headerView footerView:(UIView * _Nullable)footerView titlePreload:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))titlePreload completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Scrolls the scroll view to the view with the given anchor ID.
/// \param anchorID The desired anchorID to scroll to.
///
/// \param animated Whether the scroll action should be animated.
///
- (void)scrollToAnchorWithAnchorID:(NSInteger)anchorID animated:(BOOL)animated;
/// Scrolls and zooms the scroll view to an item with the given ID.
/// \param id The id of the desired item to scroll and zoom to.
///
- (void)scrollAndZoomToItemWithID:(SFMLItemID * _Nonnull)id;
/// Scrolls and zooms the scroll view to an item with the given ID while
/// handling and offset due to a view covering a portion of the scrollview
/// \param id The id of the desired item to scroll and zoom to.
///
/// \param bottomOffset The height of the covering view
///
- (void)scrollAndZoomToItemWithID:(SFMLItemID * _Nonnull)id bottomOffset:(CGFloat)bottomOffset;
/// Scrolls and zooms the scroll view to an item with the given ID.
/// \param globalID globalID string of the desired item to scroll and zoom to.
///
- (void)scrollAndZoomToItemWithGlobalID:(NSString * _Nonnull)globalID;
/// Scrolls and zooms the scroll view to an item with the given globalID while
/// handling and offset due to a view covering a portion of the scrollview
/// \param globalID globalID string of the desired item to scroll and zoom to.
///
/// \param bottomOffset The height of the covering view
///
- (void)scrollAndZoomToItemWithGlobalID:(NSString * _Nonnull)globalID bottomOffset:(CGFloat)bottomOffset;
/// Adds an interaction to the document view.
/// important:
/// Because the interaction gets set on the underlying document, this method must be called after the document is loaded.
/// note:
/// Keep in mind that interactions such as <code>UIContextMenuInteraction</code> may take precedence over gestures like long press.
- (void)addInteraction:(id <UIInteraction> _Nonnull)interaction SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Adds clipping annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be added for.
///
/// \param animated Whether the views should be animated. If <code>true</code>, the
/// <code>insertAnnotationView(animated:)</code> method of each <code>SFMLAnnotationView</code> view is called.
///
- (void)addClippingAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs animated:(BOOL)animated;
/// Adds coupon annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be added for.
///
- (void)addCouponAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs;
/// Removes clipping annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be removed for.
///
/// \param animated Whether the removal of views should be animated or not.
///
- (void)removeClippingAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs animated:(BOOL)animated;
/// Restores accessibility focus on the most recently focused accessibility
/// element if not nil. Call this when the <code>SFMLView</code> becomes “visible” again.
/// For example when its view controller is the top view controller again
/// (e.g. on view life cycle methods) or when a temporary view that was on
/// top of <code>SFMLView</code> is dismissed.
- (void)restoreFocusOnPreviouslyFocusedAccessibilityElement;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface SFMLView (SWIFT_EXTENSION(SFMLStatic)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@class UIScrollView;

@interface SFMLView (SWIFT_EXTENSION(SFMLStatic)) <UIScrollViewDelegate>
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidScrollToTop:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// :nodoc:
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


/// Objects conforming to this protocol are notified of analytics events. After
/// these methods are called, the object is free to send any relevant information
/// to the desired analytics service.
SWIFT_PROTOCOL("_TtP10SFMLStatic25SFMLViewAnalyticsDelegate_")
@protocol SFMLViewAnalyticsDelegate <NSObject>
/// Notifies the delegate that the view has become visible. This is not called if the
/// view has not successfully loaded.
/// \param view The <code>StorefrontSFMLView</code>.
///
- (void)sfmlViewDidOpenAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view;
/// Notifies the delegate that an engaged visit event was triggered. This event
/// is only triggered once per “visible” session. When <code>isVisible</code> is to <code>false</code>,
/// the engaged visit throttle is reset and the next time <code>isVisible</code> is <code>true</code>,
/// and engaged visit event will trigger.
/// Currently the following events trigger an engaged visit:
/// <ul>
///   <li>
///     Waiting for <<code>engagedVisitDelay</code>> after load and not interacting with the view
///   </li>
///   <li>
///     Interacting with the view (scrolling, zooming, tapping/long pressing on an item
///   </li>
/// </ul>
/// \param view The <code>StorefrontSFMLView</code>.
///
- (void)sfmlViewEngagedVisitAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view;
/// Asks the delegate if there are any insets to consider which obscure the top or bottom of the
/// <code>StorefrontSFMLView</code>. This is called when the analytics component is about to start calculating
/// item impressions, and is used to get a more accurate viewport size.
/// \param view The <code>StorefrontSFMLView</code> who might have other views overlaid on top obscuring its
/// top or bottom.
///
- (UIEdgeInsets)additionalViewportInsetsForSFMLView:(StorefrontSFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate that an item impressions event was triggered. This event
/// is triggered when a certain amount of time has passed after the <code>SFMLView</code>
/// has stopped scrolling or hasn’t been interacted with. See <code>AnalyticsManager</code>
/// to view or change the duration.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param visibleItemIDs A set containing the ID of items on the screen.
/// An item is considered to be on screen if 50% or more of it is visible or
/// if it takes up 50% or more of the viewport.
///
- (void)sfmlViewItemImpressionsAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view visibleItemIDs:(NSSet<SFMLItemID *> * _Nonnull)visibleItemIDs;
/// Notifies the delegate that an item viewable impressions event was triggered. This event
/// is triggered when a certain amount of time has passed after the <code>SFMLView</code>
/// has stopped scrolling or hasn’t been interacted with. See <code>AnalyticsManager</code>
/// to view or change the duration.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param visibleItemIDs A set containing the ID of items on the screen.
/// An item is considered to be on screen if 50% or more of it is visible or
/// if it takes up 50% or more of the viewport.
///
- (void)sfmlViewItemViewableImpressionsAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view visibleItemIDs:(NSSet<SFMLItemID *> * _Nonnull)visibleItemIDs;
/// Notifies the delegate that the wayfinder category list has become visible.
/// This event is not triggered if there are no wayfinding categories in the
/// storefront.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param highlightedCategory The name of the currently highlighted category.
///
- (void)sfmlViewWayfinderDidOpenAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view highlightedCategory:(NSString * _Nullable)highlightedCategory;
/// Notifies the delegate that a category in the wayfinder has been selected
/// by the user.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param selectedCategory The name of the selected category.
///
- (void)sfmlViewDidSelectWayfinderCategoryAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view selectedCategory:(NSString * _Nonnull)selectedCategory;
@end



@class UIColor;

/// An <code>SFMLView</code> subclass specifically for rendering a storefront. It differs from
/// a normal <code>SFMLView</code> by including wayfinding functionality. Please see <code>SFMLView</code>
/// documentation for more information on the properties publically visible.
SWIFT_CLASS("_TtC10SFMLStatic18StorefrontSFMLView")
@interface StorefrontSFMLView : SFMLView
/// Wayfinder delegate. Set this property to be able to receive wayfindr events.
@property (nonatomic, weak) id <SFMLViewWayfinderDelegate> _Nullable wayfinderDelegate;
/// Set before calling <code>load(sfml:headerView:footerView:titlePreload:completion:)</code> to enable
/// or disable the wayfinder. When disabled, the wayfinder will not appear when the scroll indicator
/// is touched.
@property (nonatomic) BOOL enableWayfinder;
/// The analytics object which listens to <code>SFMLViewDelegate</code> and <code>SFMLViewWayfinderDelegate</code>
/// callbacks. Set its <code>delegate</code> property in order to listen to analytics events.
@property (nonatomic, readonly, strong) SFMLAnalytics * _Nonnull analytics;
/// A list of the categories appearing in the wayfinder. Read-only.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable wayfinderCategories;
/// The background color of the wayfinder.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderBackgroundColor;
/// The distance between the category buttons and the edges of the wayfinder
/// as well as the vertical distance between each category button.
@property (nonatomic) CGFloat wayfinderPadding;
/// The color of the categories in their normal, unselected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleColor;
/// The color of the categories in their selected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleSelectedColor;
/// The color of the categories in their highlighted state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleHighlightedColor;
/// The background color of the categories in their selected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategorySelectedColor;
/// The image for the wayfinder scroll button. The size of the default image is 34x34 pts.
@property (nonatomic, strong) UIImage * _Nullable wayfinderScrollButtonImage;
/// Scrolls the scroll view to the view with the given section title.
/// \param sectionTitle The desired sectionTitle to scroll to.
///
/// \param animated Whether the scroll action should be animated.
///
- (void)scrollToSectionWithSectionTitle:(NSString * _Nonnull)sectionTitle animated:(BOOL)animated;
/// :nodoc:
- (nonnull instancetype)initWithImageDownloadTaskProvider:(id <SFMLImageDownloadTaskProvider> _Nonnull)imageDownloadTaskProvider OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)didMoveToSuperview;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef SFMLSTATIC_SWIFT_H
#define SFMLSTATIC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SFMLStatic",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSString;
@class NSNumber;

/// All accessiblity elements found in the <code>SFMLView</code> will be subclasses of
/// <code>SFMLAccessibilityElement</code>.
SWIFT_CLASS("_TtC10SFMLStatic24SFMLAccessibilityElement")
@interface SFMLAccessibilityElement : UIAccessibilityElement
/// The accessibility label which uses the <code>accessibilityLabel</code> property and appends the
/// return value of the delegate’s <code>sfmlAccessibilityLabelPrefix(element:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// The accessibility value which uses the <code>value</code> property and appends the
/// return value of the delegate’s <code>sfmlAccessibilityValue(element:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityValue;
/// The accessibility hint which uses the <code>hint</code> property and appends the
/// return value of the delegate’s <code>flyerViewItemAccessibilityHint(itemID:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityHint;
/// Default initializer.
- (nonnull instancetype)initWithAccessibilityContainer:(id _Nonnull)container OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>SFMLFlyerViewAccessibilityElementDelegate</code> defines methods that allow
/// further customization of accessiblity elements found in the <code>SFMLView</code>.
SWIFT_PROTOCOL("_TtP10SFMLStatic32SFMLAccessibilityElementDelegate_")
@protocol SFMLAccessibilityElementDelegate <NSObject>
/// An additional accessibility hint if desired which is appended to the default hint.
- (NSString * _Nullable)sfmlAccessibilityHintWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// An additional accessibility value if desired which is appended to the default value.
- (NSString * _Nullable)sfmlAccessibilityValueWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// A prefix that’s added onto the accessibility label if needed
- (NSString * _Nullable)sfmlAccessibilityLabelPrefixWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end

enum SFMLActionType : NSInteger;
@class NSURL;

/// An object which encapsulates the information needed to perform
/// an action when an item is of source type Action
SWIFT_CLASS("_TtC10SFMLStatic10SFMLAction")
@interface SFMLAction : NSObject
@property (nonatomic, readonly) enum SFMLActionType type;
@property (nonatomic, readonly, copy) NSURL * _Nullable ttmURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SFMLActionType, open) {
  SFMLActionTypeLink = 0,
/// Action opening a link
  SFMLActionTypeNoop = 1,
};

@protocol SFMLViewAnalyticsDelegate;

/// A configuration and convenience class for handling analytics in the framework.
/// This class implements <code>SFMLViewDelegate</code> and <code>SFMLViewWayfinderDelegate</code> and has
/// internal timers and logic to decide when to trigger <code>SFMLViewAnalyticsDelegate</code>
/// events.
SWIFT_CLASS("_TtC10SFMLStatic13SFMLAnalytics")
@interface SFMLAnalytics : NSObject
/// The analytics delegate.
@property (nonatomic, weak) id <SFMLViewAnalyticsDelegate> _Nullable delegate;
/// The amount of time to wait after the view has settled before triggering
/// an item impressions analytics event.
@property (nonatomic) NSTimeInterval itemImpressionsDelay;
/// The amount of time to wait after the view has settled before triggering
/// an item viewable impressions analytics event.
@property (nonatomic) NSTimeInterval itemViewableImpressionsDelay;
/// The amount time to wait after the view has settled before triggering
/// an engaged visit analytics event. If another event (e.g. tapping on an item,
/// manually scrolling the view, etc.) occurs, the timer using this delay is
/// cancelled and the engaged visit event is immediately fired.
@property (nonatomic) NSTimeInterval engagedVisitDelay;
/// Track an engaged visit for the SFMLView associated with this instance of SFMLAnalytics
- (void)trackEngagedVisit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class StorefrontSFMLView;

/// Objects conforming to this protocol are notified of wayfinder-related events.
SWIFT_PROTOCOL("_TtP10SFMLStatic25SFMLViewWayfinderDelegate_")
@protocol SFMLViewWayfinderDelegate
/// Called when the wayfinder is about to appear.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewWayfinderWillAppear:(StorefrontSFMLView * _Nonnull)storefrontView;
/// Called when the wayfinder did appear.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
/// \param category The category that is selected.
///
- (void)storefrontSFMLViewWayfinderDidAppear:(StorefrontSFMLView * _Nonnull)storefrontView highlightedCategory:(NSString * _Nullable)category;
/// Called when a category in the wayfinder has been selected by the user.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
/// \param category The category that is selected.
///
/// \param index The index of the selected category.
///
- (void)storefrontSFMLView:(StorefrontSFMLView * _Nonnull)storefrontView didSelectWayfinderCategory:(NSString * _Nonnull)category categoryIndex:(NSInteger)index;
/// Called when the user begins to scroll the storefront using the wayfinder
/// scroll button.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewDidStartWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// Called when the user finishes scrolling the storefront using the wayfinder
/// scroll button.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewDidEndWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
@end


@interface SFMLAnalytics (SWIFT_EXTENSION(SFMLStatic)) <SFMLViewWayfinderDelegate>
/// Note on this implementation:
/// When the wayfinder quick scroll is being used, it is setting the content
/// offset manually and the initial setting makes the scrollView call
/// <code>didEndDecelerating</code> which in turn starts tracking item impressions.
/// We stop the impressions timer so if the user starts using the wayfinder
/// quick scroll (which opens the wayfinder list), it stops any impressions
/// timer in progress which if fired would have erroneously fired an impressions
/// beacon when there hasn’t been <dwell time> seconds of dwell time.
/// If not using this implementation of analytics (i.e. not setting the delegate
/// of the <code>Analytics</code> object), make sure to keep this in mind.
- (void)storefrontSFMLViewWayfinderWillAppear:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLViewWayfinderDidAppear:(StorefrontSFMLView * _Nonnull)storefrontView highlightedCategory:(NSString * _Nullable)category;
/// :nodoc:
- (void)storefrontSFMLViewDidEndWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLViewDidStartWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLView:(StorefrontSFMLView * _Nonnull)storefrontView didSelectWayfinderCategory:(NSString * _Nonnull)category categoryIndex:(NSInteger)index;
@end

@class SFMLView;
@class SFMLItemAttributes;
@class SFMLAnnotationView;
@class SFMLItemID;

/// The <code>SFMLViewDelegate</code> protocol defines methods that allow you to handle
/// certain <code>SFMLView</code> events, such as when an item is tapped or long-pressed.
/// It also forwards some <code>UIScrollViewDelegate</code> methods in case they are needed.
SWIFT_PROTOCOL("_TtP10SFMLStatic16SFMLViewDelegate_")
@protocol SFMLViewDelegate
/// Calls the delegate when the view’s visibility has changed.
/// Visibility is dependent on the <code>isVisible</code> property being set by the user. It
/// is not automatically computed.
/// Internally, other objects (such as analytics objects) listen for visibility events.
/// \param view The <code>SFMLView</code> whose visibility changed.
///
/// \param isVisible Whether the view is visible or not. <code>true</code> is only
/// returned if the has been loaded (<code>isLoaded</code>) and is visible `isVisible). Both
/// are public properties of the view.
///
- (void)sfmlViewVisibilityChanged:(SFMLView * _Nonnull)view isVisible:(BOOL)isVisible;
/// Calls the delegate when an item is single-tapped.
/// \param view The <code>SFMLView</code> that was tapped.
///
/// \param attributes The attributes of the item.
///
- (void)sfmlView:(SFMLView * _Nonnull)view didTapItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// Calls the delegate when an item is long-pressed.
/// \param view The <code>SFMLView</code> that was long-pressed.
///
/// \param attributes An object containing the attributes of the item.
///
- (void)sfmlView:(SFMLView * _Nonnull)view didLongPressItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// Calls the delegate when the <code>SFMLView</code> is double-tapped.
/// \param view The <code>SFMLView</code> that was double-tapped.
///
/// \param point The point in <code>SFMLView</code> space where the double-tap occurred.
///
/// \param didZoomIn Whether or not the <code>SFMLView</code> zoomed in after the double-tap.
///
- (void)sfmlView:(SFMLView * _Nonnull)view doubleTappedPoint:(CGPoint)point didZoomIn:(BOOL)didZoomIn;
@optional
/// Calls the delegate when an annotation view is needed for a clipping.
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)clippingAnnotationViewForSFMLView:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calls the delegate when an annotation view is needed for a coupon.
/// \param id The ID of the item the annotation is for.
///
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)couponAnnotationViewFor:(SFMLItemID * _Nonnull)id in:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calls the delegate when an annotation view is needed for a coupon.
/// NOTE: This method is deprecated. Please use <code>couponAnnotationView(for:in:)</code>.
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)couponAnnotationViewForSFMLView:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("Deprecated. Please use `couponAnnotationView(for:in:)`.");
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidScroll(_:)</code>.
- (void)sfmlViewDidScroll:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidScrollToTop(_:)</code>.
- (void)sfmlViewDidScrollToTop:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewWillEndDragging(_:withVelocity:targetContentOffset)</code>.
- (void)sfmlViewWillEndDragging:(SFMLView * _Nonnull)view withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndDragging(_:willDecelerate:)</code>.
- (void)sfmlViewDidEndDragging:(SFMLView * _Nonnull)view willDecelerate:(BOOL)decelerate;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndScrollingAnimation(_:)</code>.
- (void)sfmlViewDidEndScrollingAnimation:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidZoom(_:)</code>.
- (void)sfmlViewDidZoom:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndZooming(_:with:atScale:)</code>.
- (void)sfmlViewDidEndZooming:(SFMLView * _Nonnull)view atScale:(CGFloat)scale;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndDecelerating(_:)</code>.
- (void)sfmlViewDidEndDecelerating:(SFMLView * _Nonnull)view;
@end


@interface SFMLAnalytics (SWIFT_EXTENSION(SFMLStatic)) <SFMLViewDelegate>
/// :nodoc:
- (void)sfmlViewVisibilityChanged:(SFMLView * _Nonnull)view isVisible:(BOOL)isVisible;
/// :nodoc:
- (void)sfmlViewDidScrollToTop:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndDecelerating:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndScrollingAnimation:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndZooming:(SFMLView * _Nonnull)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)sfmlViewDidEndDragging:(SFMLView * _Nonnull)view willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view didTapItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view didLongPressItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view doubleTappedPoint:(CGPoint)point didZoomIn:(BOOL)didZoomIn;
/// :nodoc:
- (void)sfmlViewDidZoom:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidScroll:(SFMLView * _Nonnull)view;
@end

@class NSCoder;

/// Annotation views representing <code>SFMLAnnotation</code>s should be subclasses of this view.
/// Animations for insertion/removal can be implemented if desired.
SWIFT_CLASS("_TtC10SFMLStatic18SFMLAnnotationView")
@interface SFMLAnnotationView : UIView
/// Called when this annotation view is added. Subclass can override.
/// \param animated Whether insertion of the annotation view is animated.
///
- (void)insertAnnotationViewWithAnimated:(BOOL)animated;
/// Called when this annotation view is removed. It will not be
/// called if this annotation view is removed offscreen. Subclasses can override.
/// The given completion block must be called at the end of the implementation.
/// \param animated Whether insertion of the annotation view is animated.
///
- (void)removeAnnotationViewWithAnimated:(BOOL)animated;
/// Called when this view is being zoomed. This allows an annotation to maintain
/// whatever screen size may be appropriate even while being zoomed.
/// \param zoomScale The zoomScale of the containing view.
///
- (void)handleZoomChangeWithZoomScale:(CGFloat)zoomScale;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10SFMLStatic15SFMLBorderLayer")
@interface SFMLBorderLayer : CAShapeLayer
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// This method is responsible for updating the border’s path when the view bounds change (e.g. on device rotation)
- (void)updateBorderPathWithBounds:(CGRect)bounds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>SFMLAccessibilityElement</code> subclass that is used for flyer view item
/// accessibility elements.
SWIFT_CLASS("_TtC10SFMLStatic33SFMLFlyerViewAccessibilityElement")
@interface SFMLFlyerViewAccessibilityElement : SFMLAccessibilityElement
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAccessibilityContainer:(id _Nonnull)container SWIFT_UNAVAILABLE;
@end

@class UIImage;

/// Objects conforming to this protocol are responsible for loading images with
/// a given URL and calling the given completion block.
/// Each image loading operation should also be able to be cancelled.
SWIFT_PROTOCOL("_TtP10SFMLStatic21SFMLImageDownloadTask_")
@protocol SFMLImageDownloadTask <NSObject>
/// Cancels the image downloading task.
- (void)cancel;
/// The image download task should perform a network operation to download an image
/// with the given URL. On completion it should call the given <code>completion</code> block.
/// \param url The image URL to load.
///
/// \param completion The completion block to call after the network
/// operation has finished.
///
- (void)loadImageWithURL:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end


/// Objects conforming to this protocol are responsible for providing new instances
/// of image downloading tasks.
SWIFT_PROTOCOL("_TtP10SFMLStatic29SFMLImageDownloadTaskProvider_")
@protocol SFMLImageDownloadTaskProvider <NSObject>
/// This method should return a new instance of an object conforming to
/// <code>SFMLImageDownloadTask</code>. The object returned cannot be nil.
- (id <SFMLImageDownloadTask> _Nonnull)newImageDownloadTask SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10SFMLStatic16SFMLImageLoading_")
@protocol SFMLImageLoading <NSObject>
@property (nonatomic, weak) id <SFMLImageDownloadTaskProvider> _Nullable imageDownloadTaskProvider;
@end


/// An object that encapsulates information about an item.
SWIFT_CLASS("_TtC10SFMLStatic18SFMLItemAttributes")
@interface SFMLItemAttributes : NSObject
/// The item’s ID.
@property (nonatomic, readonly, strong) SFMLItemID * _Nonnull itemID;
/// The action for when the itemID is of source == Action
@property (nonatomic, readonly, strong) SFMLAction * _Nullable action;
/// The target anchor ID of this item. This value can be passed to <code>SFMLView</code>’s
/// <code>scrollToAnchor(anchorID:animated:)</code> method to scroll to the item with
/// this value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable targetAnchorID;
/// A wrapper object containing arbitrary key/value string pairs.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull payload;
/// Default initializer.
/// \param itemID The <code>SFMLItemID</code> of the item.
///
/// \param action The <code>SFMLAction</code> of the item.
///
/// \param targetAnchorID The anchor ID that this item targets.
///
/// \param payload The data payload of this item.
///
- (nonnull instancetype)initWithItemID:(SFMLItemID * _Nonnull)itemID action:(SFMLAction * _Nullable)action targetAnchorID:(NSNumber * _Nullable)targetAnchorID payload:(NSDictionary<NSString *, NSString *> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SFMLSource : NSInteger;

SWIFT_CLASS("_TtC10SFMLStatic10SFMLItemID")
@interface SFMLItemID : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceID;
@property (nonatomic, readonly) enum SFMLSource source;
@property (nonatomic, readonly, copy) NSString * _Nullable globalID;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithSourceID:(NSString * _Nonnull)sourceID source:(enum SFMLSource)source globalID:(NSString * _Nullable)globalID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A type of item.
typedef SWIFT_ENUM(NSInteger, SFMLSource, open) {
/// An item whose source is a flyer.
  SFMLSourceFlyer = 0,
/// An item whose source is online (ecom). Differs from <code>ecomSearch</code> in that this one’s source-id is expected to be a Global ID.
  SFMLSourceEcom = 1,
/// An item whose source is online (ecom). Differs from <code>ecom</code> in that this one’s source-id is expected to be a legacy ID.
  SFMLSourceEcomSearch = 2,
/// An item whose source is a merchant item
  SFMLSourceMerchantItem = 3,
/// An item whose source is a coupon
  SFMLSourceCoupon = 4,
/// An item whose source is a digital offer
  SFMLSourceOffer = 5,
/// An item whose source is action
  SFMLSourceAction = 6,
/// An item whose source is advertisement
  SFMLSourceAdvertisement = 7,
};

@class NSData;
@protocol UIInteraction;

/// A view that takes SFML data and displays it. It owns a <code>UIScrollView</code> and provides
/// some forwarded scroll view delegate methods should the user need them.
SWIFT_CLASS("_TtC10SFMLStatic8SFMLView")
@interface SFMLView : UIView
/// The UUID for this SFML document. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable uuid;
/// The storefront version.
@property (nonatomic, readonly, copy) NSString * _Nullable version;
/// The storefront’s content hash. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable contentHash;
/// The single, external delegate of the <code>SFMLView</code> which is called to act on
/// certain events like tapping on an item.
@property (nonatomic, weak) id <SFMLViewDelegate> _Nullable delegate;
/// The accessibility delegate. Implement to be able to return custom
/// accessibility hints or values.
@property (nonatomic, weak) id <SFMLAccessibilityElementDelegate> _Nullable accessibilityDelegate;
/// A mapping of <code>SFMLItemID</code>s to <code>SFMLItemAttribute</code>s.
@property (nonatomic, readonly, copy) NSDictionary<SFMLItemID *, SFMLItemAttributes *> * _Nonnull itemIDAttributes;
/// A set containing all the item IDs in the SFML document. Note that this is
/// a computed value. Read-only.
@property (nonatomic, readonly, copy) NSSet<SFMLItemID *> * _Nonnull itemIDs SWIFT_DEPRECATED_MSG("\n  This is an inefficient property that will be removed in a future version. Use `itemIDAttributes` instead.\n  ");
/// The size of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGSize viewportSize;
/// The visible bounds of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGRect visibleBounds;
/// The content offset of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGPoint contentOffset;
/// The content size of the internal scrollview. This can be set to override the internal
/// content size calculated by the scroll view.
@property (nonatomic) CGSize contentSize;
/// The zoom scale of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGFloat zoomScale;
/// The content inset of the internal scrollView.
@property (nonatomic) UIEdgeInsets contentInset;
/// The percentage of the content that the current contentOffset’s y point is at.
/// This can be used to scroll to a certain percentage of the content
/// (i.e. on size class/rotation changes to maintain the content offset before the change).
@property (nonatomic) CGFloat contentOffsetPercentage;
/// Whether the SFML has finished loading. Read-only.
@property (nonatomic, readonly) BOOL isLoaded;
/// A flag which mainly affects whether analytics events on the <code>StorefrontSFMLView</code>
/// subclass are correctly triggered. This flag exists on the super class so
/// its callback can be bundled into <code>SFMLViewDelegate</code>.
/// It is the responsibility of the developer to set this flag appropriately.
/// Changing this value is only functional if <code>isLoaded</code> is <code>true</code> (this is
/// guarded internally so it is not necessary to check it manually).
/// <code>isVisible</code> should be <code>true</code> when the view is on screen (<code>viewDidAppear(_:)</code> and <code>viewDidLoad</code>,
/// when the app becomes active and it is the front-most view) and it should be
/// <code>false</code> when the view leaves the screen (<code>viewWillDisappear(_:)</code> or the app
/// goes into the background.
@property (nonatomic) BOOL isVisible;
/// The scroll view’s main view and the single ancestor of all of the SFML
/// element views. It is used to determine content size of the scroll view
/// and all accessible elements are stored in this view’s
/// <code>accessibilityElements</code> property.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// The name of a font used any native UI components in the SFML. It is assumed that
/// the font has been bundled with the application and registered in its plist.
/// Components affected: item grid labels, collapsible layout button, wayfinder category buttons
@property (nonatomic, copy) NSString * _Nullable customFontName;
/// Set this to true if you want the storefront to utilize the default clipping annotation
/// (a yellow circle). By default, this bool is set to false, and you will be expected to provide
/// a SFMLAnnotationView subclass to the appropriate delegate method if you wish to render a
/// clipping annotation.
@property (nonatomic) BOOL shouldUseDefaultClippingAnnotation;
/// Whether the view should track accessibility focus events. The value of
/// this property mirrors <code>isVisible</code> and is updated automatically.
/// You may also manually change this value if desired depending on the use
/// case, however note that it will be overridden the next time <code>isVisible</code>
/// changes.
/// An example use case for updating it manually can be if you are displaying
/// a custom view on top of <code>SFMLView</code> where <code>isVisible</code> wouldn’t be set to
/// <code>false</code> but business logic dictates that accessibility elements on
/// <code>SFMLView</code> should not interactable. In a case like this, you can manually
/// set <code>shouldTrackAccessibilityFocus</code> to <code>false</code> before displaying the
/// custom view so the last tracked element remains accurate. Upon dismissal
/// of this temporary view, you may then call
/// <code>restoreFocusOnPreviouslyFocusedAccessibilityElement()</code> to restore focus
/// on the last accessibility element focused before presentation of the
/// temporary view.
/// If restoring the last focused accessibility element UX is not desired,
/// simply never call <code>restoreFocusOnPreviouslyFocusedAccessibilityElement()</code>.
@property (nonatomic) BOOL shouldTrackAccessibilityFocus;
/// Default initializer.
/// \param imageDownloadTaskProvider An object conforming to the
/// <code>SFMLImageDownloadTaskProvider</code> protocol which is responsible for providing
/// image download tasks. NOTE: This is an unowned property.
///
- (nonnull instancetype)initWithImageDownloadTaskProvider:(id <SFMLImageDownloadTaskProvider> _Nonnull)imageDownloadTaskProvider OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// This method takes the given SFML <code>Data</code> and attempts to parse and render it.
/// Note: if this method is called multiple times on the same instance, analytics events such as EV +
/// open will fire again. The onus is on the client application to de-dupe as needed (this SDK makes no
/// assumptions about the uniqueness of the content it is potentially re-loading).
/// \param sfml SFML in the form of <code>Data</code>.
///
/// \param headerView A view that can be rendered above the SFML document.
///
/// \param footerView A view that can be rendered below the SFML document.
///
/// \param titlePreload A block that is called once the title of the document is parsed.
/// This is to allow the title to be displayed before the document is completely rendered.
///
/// \param completion A completion block that lets the user know when
/// rendering is complete or if there was an error encountered.
///
- (void)loadWithSfml:(NSData * _Nonnull)sfml headerView:(UIView * _Nullable)headerView footerView:(UIView * _Nullable)footerView titlePreload:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))titlePreload completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Scrolls the scroll view to the view with the given anchor ID.
/// \param anchorID The desired anchorID to scroll to.
///
/// \param animated Whether the scroll action should be animated.
///
- (void)scrollToAnchorWithAnchorID:(NSInteger)anchorID animated:(BOOL)animated;
/// Scrolls and zooms the scroll view to an item with the given ID.
/// \param id The id of the desired item to scroll and zoom to.
///
- (void)scrollAndZoomToItemWithID:(SFMLItemID * _Nonnull)id;
/// Scrolls and zooms the scroll view to an item with the given ID while
/// handling and offset due to a view covering a portion of the scrollview
/// \param id The id of the desired item to scroll and zoom to.
///
/// \param bottomOffset The height of the covering view
///
- (void)scrollAndZoomToItemWithID:(SFMLItemID * _Nonnull)id bottomOffset:(CGFloat)bottomOffset;
/// Scrolls and zooms the scroll view to an item with the given ID.
/// \param globalID globalID string of the desired item to scroll and zoom to.
///
- (void)scrollAndZoomToItemWithGlobalID:(NSString * _Nonnull)globalID;
/// Scrolls and zooms the scroll view to an item with the given globalID while
/// handling and offset due to a view covering a portion of the scrollview
/// \param globalID globalID string of the desired item to scroll and zoom to.
///
/// \param bottomOffset The height of the covering view
///
- (void)scrollAndZoomToItemWithGlobalID:(NSString * _Nonnull)globalID bottomOffset:(CGFloat)bottomOffset;
/// Adds an interaction to the document view.
/// important:
/// Because the interaction gets set on the underlying document, this method must be called after the document is loaded.
/// note:
/// Keep in mind that interactions such as <code>UIContextMenuInteraction</code> may take precedence over gestures like long press.
- (void)addInteraction:(id <UIInteraction> _Nonnull)interaction SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Adds clipping annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be added for.
///
/// \param animated Whether the views should be animated. If <code>true</code>, the
/// <code>insertAnnotationView(animated:)</code> method of each <code>SFMLAnnotationView</code> view is called.
///
- (void)addClippingAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs animated:(BOOL)animated;
/// Adds coupon annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be added for.
///
- (void)addCouponAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs;
/// Removes clipping annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be removed for.
///
/// \param animated Whether the removal of views should be animated or not.
///
- (void)removeClippingAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs animated:(BOOL)animated;
/// Restores accessibility focus on the most recently focused accessibility
/// element if not nil. Call this when the <code>SFMLView</code> becomes “visible” again.
/// For example when its view controller is the top view controller again
/// (e.g. on view life cycle methods) or when a temporary view that was on
/// top of <code>SFMLView</code> is dismissed.
- (void)restoreFocusOnPreviouslyFocusedAccessibilityElement;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface SFMLView (SWIFT_EXTENSION(SFMLStatic)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@class UIScrollView;

@interface SFMLView (SWIFT_EXTENSION(SFMLStatic)) <UIScrollViewDelegate>
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidScrollToTop:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// :nodoc:
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


/// Objects conforming to this protocol are notified of analytics events. After
/// these methods are called, the object is free to send any relevant information
/// to the desired analytics service.
SWIFT_PROTOCOL("_TtP10SFMLStatic25SFMLViewAnalyticsDelegate_")
@protocol SFMLViewAnalyticsDelegate <NSObject>
/// Notifies the delegate that the view has become visible. This is not called if the
/// view has not successfully loaded.
/// \param view The <code>StorefrontSFMLView</code>.
///
- (void)sfmlViewDidOpenAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view;
/// Notifies the delegate that an engaged visit event was triggered. This event
/// is only triggered once per “visible” session. When <code>isVisible</code> is to <code>false</code>,
/// the engaged visit throttle is reset and the next time <code>isVisible</code> is <code>true</code>,
/// and engaged visit event will trigger.
/// Currently the following events trigger an engaged visit:
/// <ul>
///   <li>
///     Waiting for <<code>engagedVisitDelay</code>> after load and not interacting with the view
///   </li>
///   <li>
///     Interacting with the view (scrolling, zooming, tapping/long pressing on an item
///   </li>
/// </ul>
/// \param view The <code>StorefrontSFMLView</code>.
///
- (void)sfmlViewEngagedVisitAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view;
/// Asks the delegate if there are any insets to consider which obscure the top or bottom of the
/// <code>StorefrontSFMLView</code>. This is called when the analytics component is about to start calculating
/// item impressions, and is used to get a more accurate viewport size.
/// \param view The <code>StorefrontSFMLView</code> who might have other views overlaid on top obscuring its
/// top or bottom.
///
- (UIEdgeInsets)additionalViewportInsetsForSFMLView:(StorefrontSFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate that an item impressions event was triggered. This event
/// is triggered when a certain amount of time has passed after the <code>SFMLView</code>
/// has stopped scrolling or hasn’t been interacted with. See <code>AnalyticsManager</code>
/// to view or change the duration.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param visibleItemIDs A set containing the ID of items on the screen.
/// An item is considered to be on screen if 50% or more of it is visible or
/// if it takes up 50% or more of the viewport.
///
- (void)sfmlViewItemImpressionsAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view visibleItemIDs:(NSSet<SFMLItemID *> * _Nonnull)visibleItemIDs;
/// Notifies the delegate that an item viewable impressions event was triggered. This event
/// is triggered when a certain amount of time has passed after the <code>SFMLView</code>
/// has stopped scrolling or hasn’t been interacted with. See <code>AnalyticsManager</code>
/// to view or change the duration.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param visibleItemIDs A set containing the ID of items on the screen.
/// An item is considered to be on screen if 50% or more of it is visible or
/// if it takes up 50% or more of the viewport.
///
- (void)sfmlViewItemViewableImpressionsAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view visibleItemIDs:(NSSet<SFMLItemID *> * _Nonnull)visibleItemIDs;
/// Notifies the delegate that the wayfinder category list has become visible.
/// This event is not triggered if there are no wayfinding categories in the
/// storefront.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param highlightedCategory The name of the currently highlighted category.
///
- (void)sfmlViewWayfinderDidOpenAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view highlightedCategory:(NSString * _Nullable)highlightedCategory;
/// Notifies the delegate that a category in the wayfinder has been selected
/// by the user.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param selectedCategory The name of the selected category.
///
- (void)sfmlViewDidSelectWayfinderCategoryAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view selectedCategory:(NSString * _Nonnull)selectedCategory;
@end



@class UIColor;

/// An <code>SFMLView</code> subclass specifically for rendering a storefront. It differs from
/// a normal <code>SFMLView</code> by including wayfinding functionality. Please see <code>SFMLView</code>
/// documentation for more information on the properties publically visible.
SWIFT_CLASS("_TtC10SFMLStatic18StorefrontSFMLView")
@interface StorefrontSFMLView : SFMLView
/// Wayfinder delegate. Set this property to be able to receive wayfindr events.
@property (nonatomic, weak) id <SFMLViewWayfinderDelegate> _Nullable wayfinderDelegate;
/// Set before calling <code>load(sfml:headerView:footerView:titlePreload:completion:)</code> to enable
/// or disable the wayfinder. When disabled, the wayfinder will not appear when the scroll indicator
/// is touched.
@property (nonatomic) BOOL enableWayfinder;
/// The analytics object which listens to <code>SFMLViewDelegate</code> and <code>SFMLViewWayfinderDelegate</code>
/// callbacks. Set its <code>delegate</code> property in order to listen to analytics events.
@property (nonatomic, readonly, strong) SFMLAnalytics * _Nonnull analytics;
/// A list of the categories appearing in the wayfinder. Read-only.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable wayfinderCategories;
/// The background color of the wayfinder.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderBackgroundColor;
/// The distance between the category buttons and the edges of the wayfinder
/// as well as the vertical distance between each category button.
@property (nonatomic) CGFloat wayfinderPadding;
/// The color of the categories in their normal, unselected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleColor;
/// The color of the categories in their selected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleSelectedColor;
/// The color of the categories in their highlighted state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleHighlightedColor;
/// The background color of the categories in their selected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategorySelectedColor;
/// The image for the wayfinder scroll button. The size of the default image is 34x34 pts.
@property (nonatomic, strong) UIImage * _Nullable wayfinderScrollButtonImage;
/// Scrolls the scroll view to the view with the given section title.
/// \param sectionTitle The desired sectionTitle to scroll to.
///
/// \param animated Whether the scroll action should be animated.
///
- (void)scrollToSectionWithSectionTitle:(NSString * _Nonnull)sectionTitle animated:(BOOL)animated;
/// :nodoc:
- (nonnull instancetype)initWithImageDownloadTaskProvider:(id <SFMLImageDownloadTaskProvider> _Nonnull)imageDownloadTaskProvider OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)didMoveToSuperview;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef SFMLSTATIC_SWIFT_H
#define SFMLSTATIC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SFMLStatic",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSString;
@class NSNumber;

/// All accessiblity elements found in the <code>SFMLView</code> will be subclasses of
/// <code>SFMLAccessibilityElement</code>.
SWIFT_CLASS("_TtC10SFMLStatic24SFMLAccessibilityElement")
@interface SFMLAccessibilityElement : UIAccessibilityElement
/// The accessibility label which uses the <code>accessibilityLabel</code> property and appends the
/// return value of the delegate’s <code>sfmlAccessibilityLabelPrefix(element:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// The accessibility value which uses the <code>value</code> property and appends the
/// return value of the delegate’s <code>sfmlAccessibilityValue(element:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityValue;
/// The accessibility hint which uses the <code>hint</code> property and appends the
/// return value of the delegate’s <code>flyerViewItemAccessibilityHint(itemID:)</code>
/// if not nil.
@property (nonatomic, copy) NSString * _Nullable accessibilityHint;
/// Default initializer.
- (nonnull instancetype)initWithAccessibilityContainer:(id _Nonnull)container OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>SFMLFlyerViewAccessibilityElementDelegate</code> defines methods that allow
/// further customization of accessiblity elements found in the <code>SFMLView</code>.
SWIFT_PROTOCOL("_TtP10SFMLStatic32SFMLAccessibilityElementDelegate_")
@protocol SFMLAccessibilityElementDelegate <NSObject>
/// An additional accessibility hint if desired which is appended to the default hint.
- (NSString * _Nullable)sfmlAccessibilityHintWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// An additional accessibility value if desired which is appended to the default value.
- (NSString * _Nullable)sfmlAccessibilityValueWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// A prefix that’s added onto the accessibility label if needed
- (NSString * _Nullable)sfmlAccessibilityLabelPrefixWithElement:(SFMLAccessibilityElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end

enum SFMLActionType : NSInteger;
@class NSURL;

/// An object which encapsulates the information needed to perform
/// an action when an item is of source type Action
SWIFT_CLASS("_TtC10SFMLStatic10SFMLAction")
@interface SFMLAction : NSObject
@property (nonatomic, readonly) enum SFMLActionType type;
@property (nonatomic, readonly, copy) NSURL * _Nullable ttmURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SFMLActionType, open) {
  SFMLActionTypeLink = 0,
/// Action opening a link
  SFMLActionTypeNoop = 1,
};

@protocol SFMLViewAnalyticsDelegate;

/// A configuration and convenience class for handling analytics in the framework.
/// This class implements <code>SFMLViewDelegate</code> and <code>SFMLViewWayfinderDelegate</code> and has
/// internal timers and logic to decide when to trigger <code>SFMLViewAnalyticsDelegate</code>
/// events.
SWIFT_CLASS("_TtC10SFMLStatic13SFMLAnalytics")
@interface SFMLAnalytics : NSObject
/// The analytics delegate.
@property (nonatomic, weak) id <SFMLViewAnalyticsDelegate> _Nullable delegate;
/// The amount of time to wait after the view has settled before triggering
/// an item impressions analytics event.
@property (nonatomic) NSTimeInterval itemImpressionsDelay;
/// The amount of time to wait after the view has settled before triggering
/// an item viewable impressions analytics event.
@property (nonatomic) NSTimeInterval itemViewableImpressionsDelay;
/// The amount time to wait after the view has settled before triggering
/// an engaged visit analytics event. If another event (e.g. tapping on an item,
/// manually scrolling the view, etc.) occurs, the timer using this delay is
/// cancelled and the engaged visit event is immediately fired.
@property (nonatomic) NSTimeInterval engagedVisitDelay;
/// Track an engaged visit for the SFMLView associated with this instance of SFMLAnalytics
- (void)trackEngagedVisit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class StorefrontSFMLView;

/// Objects conforming to this protocol are notified of wayfinder-related events.
SWIFT_PROTOCOL("_TtP10SFMLStatic25SFMLViewWayfinderDelegate_")
@protocol SFMLViewWayfinderDelegate
/// Called when the wayfinder is about to appear.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewWayfinderWillAppear:(StorefrontSFMLView * _Nonnull)storefrontView;
/// Called when the wayfinder did appear.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
/// \param category The category that is selected.
///
- (void)storefrontSFMLViewWayfinderDidAppear:(StorefrontSFMLView * _Nonnull)storefrontView highlightedCategory:(NSString * _Nullable)category;
/// Called when a category in the wayfinder has been selected by the user.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
/// \param category The category that is selected.
///
/// \param index The index of the selected category.
///
- (void)storefrontSFMLView:(StorefrontSFMLView * _Nonnull)storefrontView didSelectWayfinderCategory:(NSString * _Nonnull)category categoryIndex:(NSInteger)index;
/// Called when the user begins to scroll the storefront using the wayfinder
/// scroll button.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewDidStartWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// Called when the user finishes scrolling the storefront using the wayfinder
/// scroll button.
/// \param storefrontView The <code>StorefrontSFMLView</code> the wayfinder belongs to.
///
- (void)storefrontSFMLViewDidEndWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
@end


@interface SFMLAnalytics (SWIFT_EXTENSION(SFMLStatic)) <SFMLViewWayfinderDelegate>
/// Note on this implementation:
/// When the wayfinder quick scroll is being used, it is setting the content
/// offset manually and the initial setting makes the scrollView call
/// <code>didEndDecelerating</code> which in turn starts tracking item impressions.
/// We stop the impressions timer so if the user starts using the wayfinder
/// quick scroll (which opens the wayfinder list), it stops any impressions
/// timer in progress which if fired would have erroneously fired an impressions
/// beacon when there hasn’t been <dwell time> seconds of dwell time.
/// If not using this implementation of analytics (i.e. not setting the delegate
/// of the <code>Analytics</code> object), make sure to keep this in mind.
- (void)storefrontSFMLViewWayfinderWillAppear:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLViewWayfinderDidAppear:(StorefrontSFMLView * _Nonnull)storefrontView highlightedCategory:(NSString * _Nullable)category;
/// :nodoc:
- (void)storefrontSFMLViewDidEndWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLViewDidStartWayfinderScroll:(StorefrontSFMLView * _Nonnull)storefrontView;
/// :nodoc:
- (void)storefrontSFMLView:(StorefrontSFMLView * _Nonnull)storefrontView didSelectWayfinderCategory:(NSString * _Nonnull)category categoryIndex:(NSInteger)index;
@end

@class SFMLView;
@class SFMLItemAttributes;
@class SFMLAnnotationView;
@class SFMLItemID;

/// The <code>SFMLViewDelegate</code> protocol defines methods that allow you to handle
/// certain <code>SFMLView</code> events, such as when an item is tapped or long-pressed.
/// It also forwards some <code>UIScrollViewDelegate</code> methods in case they are needed.
SWIFT_PROTOCOL("_TtP10SFMLStatic16SFMLViewDelegate_")
@protocol SFMLViewDelegate
/// Calls the delegate when the view’s visibility has changed.
/// Visibility is dependent on the <code>isVisible</code> property being set by the user. It
/// is not automatically computed.
/// Internally, other objects (such as analytics objects) listen for visibility events.
/// \param view The <code>SFMLView</code> whose visibility changed.
///
/// \param isVisible Whether the view is visible or not. <code>true</code> is only
/// returned if the has been loaded (<code>isLoaded</code>) and is visible `isVisible). Both
/// are public properties of the view.
///
- (void)sfmlViewVisibilityChanged:(SFMLView * _Nonnull)view isVisible:(BOOL)isVisible;
/// Calls the delegate when an item is single-tapped.
/// \param view The <code>SFMLView</code> that was tapped.
///
/// \param attributes The attributes of the item.
///
- (void)sfmlView:(SFMLView * _Nonnull)view didTapItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// Calls the delegate when an item is long-pressed.
/// \param view The <code>SFMLView</code> that was long-pressed.
///
/// \param attributes An object containing the attributes of the item.
///
- (void)sfmlView:(SFMLView * _Nonnull)view didLongPressItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// Calls the delegate when the <code>SFMLView</code> is double-tapped.
/// \param view The <code>SFMLView</code> that was double-tapped.
///
/// \param point The point in <code>SFMLView</code> space where the double-tap occurred.
///
/// \param didZoomIn Whether or not the <code>SFMLView</code> zoomed in after the double-tap.
///
- (void)sfmlView:(SFMLView * _Nonnull)view doubleTappedPoint:(CGPoint)point didZoomIn:(BOOL)didZoomIn;
@optional
/// Calls the delegate when an annotation view is needed for a clipping.
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)clippingAnnotationViewForSFMLView:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calls the delegate when an annotation view is needed for a coupon.
/// \param id The ID of the item the annotation is for.
///
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)couponAnnotationViewFor:(SFMLItemID * _Nonnull)id in:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calls the delegate when an annotation view is needed for a coupon.
/// NOTE: This method is deprecated. Please use <code>couponAnnotationView(for:in:)</code>.
/// \param view The <code>SFMLView</code> that needs an annotation view.
///
- (SFMLAnnotationView * _Nullable)couponAnnotationViewForSFMLView:(SFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("Deprecated. Please use `couponAnnotationView(for:in:)`.");
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidScroll(_:)</code>.
- (void)sfmlViewDidScroll:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidScrollToTop(_:)</code>.
- (void)sfmlViewDidScrollToTop:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewWillEndDragging(_:withVelocity:targetContentOffset)</code>.
- (void)sfmlViewWillEndDragging:(SFMLView * _Nonnull)view withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndDragging(_:willDecelerate:)</code>.
- (void)sfmlViewDidEndDragging:(SFMLView * _Nonnull)view willDecelerate:(BOOL)decelerate;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndScrollingAnimation(_:)</code>.
- (void)sfmlViewDidEndScrollingAnimation:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidZoom(_:)</code>.
- (void)sfmlViewDidZoom:(SFMLView * _Nonnull)view;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndZooming(_:with:atScale:)</code>.
- (void)sfmlViewDidEndZooming:(SFMLView * _Nonnull)view atScale:(CGFloat)scale;
/// <code>SFMLView</code>-equivalent of <code>scrollViewDidEndDecelerating(_:)</code>.
- (void)sfmlViewDidEndDecelerating:(SFMLView * _Nonnull)view;
@end


@interface SFMLAnalytics (SWIFT_EXTENSION(SFMLStatic)) <SFMLViewDelegate>
/// :nodoc:
- (void)sfmlViewVisibilityChanged:(SFMLView * _Nonnull)view isVisible:(BOOL)isVisible;
/// :nodoc:
- (void)sfmlViewDidScrollToTop:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndDecelerating:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndScrollingAnimation:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidEndZooming:(SFMLView * _Nonnull)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)sfmlViewDidEndDragging:(SFMLView * _Nonnull)view willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view didTapItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view didLongPressItemWithAttributes:(SFMLItemAttributes * _Nonnull)attributes;
/// :nodoc:
- (void)sfmlView:(SFMLView * _Nonnull)view doubleTappedPoint:(CGPoint)point didZoomIn:(BOOL)didZoomIn;
/// :nodoc:
- (void)sfmlViewDidZoom:(SFMLView * _Nonnull)view;
/// :nodoc:
- (void)sfmlViewDidScroll:(SFMLView * _Nonnull)view;
@end

@class NSCoder;

/// Annotation views representing <code>SFMLAnnotation</code>s should be subclasses of this view.
/// Animations for insertion/removal can be implemented if desired.
SWIFT_CLASS("_TtC10SFMLStatic18SFMLAnnotationView")
@interface SFMLAnnotationView : UIView
/// Called when this annotation view is added. Subclass can override.
/// \param animated Whether insertion of the annotation view is animated.
///
- (void)insertAnnotationViewWithAnimated:(BOOL)animated;
/// Called when this annotation view is removed. It will not be
/// called if this annotation view is removed offscreen. Subclasses can override.
/// The given completion block must be called at the end of the implementation.
/// \param animated Whether insertion of the annotation view is animated.
///
- (void)removeAnnotationViewWithAnimated:(BOOL)animated;
/// Called when this view is being zoomed. This allows an annotation to maintain
/// whatever screen size may be appropriate even while being zoomed.
/// \param zoomScale The zoomScale of the containing view.
///
- (void)handleZoomChangeWithZoomScale:(CGFloat)zoomScale;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10SFMLStatic15SFMLBorderLayer")
@interface SFMLBorderLayer : CAShapeLayer
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// This method is responsible for updating the border’s path when the view bounds change (e.g. on device rotation)
- (void)updateBorderPathWithBounds:(CGRect)bounds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>SFMLAccessibilityElement</code> subclass that is used for flyer view item
/// accessibility elements.
SWIFT_CLASS("_TtC10SFMLStatic33SFMLFlyerViewAccessibilityElement")
@interface SFMLFlyerViewAccessibilityElement : SFMLAccessibilityElement
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAccessibilityContainer:(id _Nonnull)container SWIFT_UNAVAILABLE;
@end

@class UIImage;

/// Objects conforming to this protocol are responsible for loading images with
/// a given URL and calling the given completion block.
/// Each image loading operation should also be able to be cancelled.
SWIFT_PROTOCOL("_TtP10SFMLStatic21SFMLImageDownloadTask_")
@protocol SFMLImageDownloadTask <NSObject>
/// Cancels the image downloading task.
- (void)cancel;
/// The image download task should perform a network operation to download an image
/// with the given URL. On completion it should call the given <code>completion</code> block.
/// \param url The image URL to load.
///
/// \param completion The completion block to call after the network
/// operation has finished.
///
- (void)loadImageWithURL:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end


/// Objects conforming to this protocol are responsible for providing new instances
/// of image downloading tasks.
SWIFT_PROTOCOL("_TtP10SFMLStatic29SFMLImageDownloadTaskProvider_")
@protocol SFMLImageDownloadTaskProvider <NSObject>
/// This method should return a new instance of an object conforming to
/// <code>SFMLImageDownloadTask</code>. The object returned cannot be nil.
- (id <SFMLImageDownloadTask> _Nonnull)newImageDownloadTask SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10SFMLStatic16SFMLImageLoading_")
@protocol SFMLImageLoading <NSObject>
@property (nonatomic, weak) id <SFMLImageDownloadTaskProvider> _Nullable imageDownloadTaskProvider;
@end


/// An object that encapsulates information about an item.
SWIFT_CLASS("_TtC10SFMLStatic18SFMLItemAttributes")
@interface SFMLItemAttributes : NSObject
/// The item’s ID.
@property (nonatomic, readonly, strong) SFMLItemID * _Nonnull itemID;
/// The action for when the itemID is of source == Action
@property (nonatomic, readonly, strong) SFMLAction * _Nullable action;
/// The target anchor ID of this item. This value can be passed to <code>SFMLView</code>’s
/// <code>scrollToAnchor(anchorID:animated:)</code> method to scroll to the item with
/// this value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable targetAnchorID;
/// A wrapper object containing arbitrary key/value string pairs.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull payload;
/// Default initializer.
/// \param itemID The <code>SFMLItemID</code> of the item.
///
/// \param action The <code>SFMLAction</code> of the item.
///
/// \param targetAnchorID The anchor ID that this item targets.
///
/// \param payload The data payload of this item.
///
- (nonnull instancetype)initWithItemID:(SFMLItemID * _Nonnull)itemID action:(SFMLAction * _Nullable)action targetAnchorID:(NSNumber * _Nullable)targetAnchorID payload:(NSDictionary<NSString *, NSString *> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SFMLSource : NSInteger;

SWIFT_CLASS("_TtC10SFMLStatic10SFMLItemID")
@interface SFMLItemID : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceID;
@property (nonatomic, readonly) enum SFMLSource source;
@property (nonatomic, readonly, copy) NSString * _Nullable globalID;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithSourceID:(NSString * _Nonnull)sourceID source:(enum SFMLSource)source globalID:(NSString * _Nullable)globalID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A type of item.
typedef SWIFT_ENUM(NSInteger, SFMLSource, open) {
/// An item whose source is a flyer.
  SFMLSourceFlyer = 0,
/// An item whose source is online (ecom). Differs from <code>ecomSearch</code> in that this one’s source-id is expected to be a Global ID.
  SFMLSourceEcom = 1,
/// An item whose source is online (ecom). Differs from <code>ecom</code> in that this one’s source-id is expected to be a legacy ID.
  SFMLSourceEcomSearch = 2,
/// An item whose source is a merchant item
  SFMLSourceMerchantItem = 3,
/// An item whose source is a coupon
  SFMLSourceCoupon = 4,
/// An item whose source is a digital offer
  SFMLSourceOffer = 5,
/// An item whose source is action
  SFMLSourceAction = 6,
/// An item whose source is advertisement
  SFMLSourceAdvertisement = 7,
};

@class NSData;
@protocol UIInteraction;

/// A view that takes SFML data and displays it. It owns a <code>UIScrollView</code> and provides
/// some forwarded scroll view delegate methods should the user need them.
SWIFT_CLASS("_TtC10SFMLStatic8SFMLView")
@interface SFMLView : UIView
/// The UUID for this SFML document. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable uuid;
/// The storefront version.
@property (nonatomic, readonly, copy) NSString * _Nullable version;
/// The storefront’s content hash. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable contentHash;
/// The single, external delegate of the <code>SFMLView</code> which is called to act on
/// certain events like tapping on an item.
@property (nonatomic, weak) id <SFMLViewDelegate> _Nullable delegate;
/// The accessibility delegate. Implement to be able to return custom
/// accessibility hints or values.
@property (nonatomic, weak) id <SFMLAccessibilityElementDelegate> _Nullable accessibilityDelegate;
/// A mapping of <code>SFMLItemID</code>s to <code>SFMLItemAttribute</code>s.
@property (nonatomic, readonly, copy) NSDictionary<SFMLItemID *, SFMLItemAttributes *> * _Nonnull itemIDAttributes;
/// A set containing all the item IDs in the SFML document. Note that this is
/// a computed value. Read-only.
@property (nonatomic, readonly, copy) NSSet<SFMLItemID *> * _Nonnull itemIDs SWIFT_DEPRECATED_MSG("\n  This is an inefficient property that will be removed in a future version. Use `itemIDAttributes` instead.\n  ");
/// The size of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGSize viewportSize;
/// The visible bounds of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGRect visibleBounds;
/// The content offset of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGPoint contentOffset;
/// The content size of the internal scrollview. This can be set to override the internal
/// content size calculated by the scroll view.
@property (nonatomic) CGSize contentSize;
/// The zoom scale of the internal scrollview. Read-only.
@property (nonatomic, readonly) CGFloat zoomScale;
/// The content inset of the internal scrollView.
@property (nonatomic) UIEdgeInsets contentInset;
/// The percentage of the content that the current contentOffset’s y point is at.
/// This can be used to scroll to a certain percentage of the content
/// (i.e. on size class/rotation changes to maintain the content offset before the change).
@property (nonatomic) CGFloat contentOffsetPercentage;
/// Whether the SFML has finished loading. Read-only.
@property (nonatomic, readonly) BOOL isLoaded;
/// A flag which mainly affects whether analytics events on the <code>StorefrontSFMLView</code>
/// subclass are correctly triggered. This flag exists on the super class so
/// its callback can be bundled into <code>SFMLViewDelegate</code>.
/// It is the responsibility of the developer to set this flag appropriately.
/// Changing this value is only functional if <code>isLoaded</code> is <code>true</code> (this is
/// guarded internally so it is not necessary to check it manually).
/// <code>isVisible</code> should be <code>true</code> when the view is on screen (<code>viewDidAppear(_:)</code> and <code>viewDidLoad</code>,
/// when the app becomes active and it is the front-most view) and it should be
/// <code>false</code> when the view leaves the screen (<code>viewWillDisappear(_:)</code> or the app
/// goes into the background.
@property (nonatomic) BOOL isVisible;
/// The scroll view’s main view and the single ancestor of all of the SFML
/// element views. It is used to determine content size of the scroll view
/// and all accessible elements are stored in this view’s
/// <code>accessibilityElements</code> property.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// The name of a font used any native UI components in the SFML. It is assumed that
/// the font has been bundled with the application and registered in its plist.
/// Components affected: item grid labels, collapsible layout button, wayfinder category buttons
@property (nonatomic, copy) NSString * _Nullable customFontName;
/// Set this to true if you want the storefront to utilize the default clipping annotation
/// (a yellow circle). By default, this bool is set to false, and you will be expected to provide
/// a SFMLAnnotationView subclass to the appropriate delegate method if you wish to render a
/// clipping annotation.
@property (nonatomic) BOOL shouldUseDefaultClippingAnnotation;
/// Whether the view should track accessibility focus events. The value of
/// this property mirrors <code>isVisible</code> and is updated automatically.
/// You may also manually change this value if desired depending on the use
/// case, however note that it will be overridden the next time <code>isVisible</code>
/// changes.
/// An example use case for updating it manually can be if you are displaying
/// a custom view on top of <code>SFMLView</code> where <code>isVisible</code> wouldn’t be set to
/// <code>false</code> but business logic dictates that accessibility elements on
/// <code>SFMLView</code> should not interactable. In a case like this, you can manually
/// set <code>shouldTrackAccessibilityFocus</code> to <code>false</code> before displaying the
/// custom view so the last tracked element remains accurate. Upon dismissal
/// of this temporary view, you may then call
/// <code>restoreFocusOnPreviouslyFocusedAccessibilityElement()</code> to restore focus
/// on the last accessibility element focused before presentation of the
/// temporary view.
/// If restoring the last focused accessibility element UX is not desired,
/// simply never call <code>restoreFocusOnPreviouslyFocusedAccessibilityElement()</code>.
@property (nonatomic) BOOL shouldTrackAccessibilityFocus;
/// Default initializer.
/// \param imageDownloadTaskProvider An object conforming to the
/// <code>SFMLImageDownloadTaskProvider</code> protocol which is responsible for providing
/// image download tasks. NOTE: This is an unowned property.
///
- (nonnull instancetype)initWithImageDownloadTaskProvider:(id <SFMLImageDownloadTaskProvider> _Nonnull)imageDownloadTaskProvider OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// This method takes the given SFML <code>Data</code> and attempts to parse and render it.
/// Note: if this method is called multiple times on the same instance, analytics events such as EV +
/// open will fire again. The onus is on the client application to de-dupe as needed (this SDK makes no
/// assumptions about the uniqueness of the content it is potentially re-loading).
/// \param sfml SFML in the form of <code>Data</code>.
///
/// \param headerView A view that can be rendered above the SFML document.
///
/// \param footerView A view that can be rendered below the SFML document.
///
/// \param titlePreload A block that is called once the title of the document is parsed.
/// This is to allow the title to be displayed before the document is completely rendered.
///
/// \param completion A completion block that lets the user know when
/// rendering is complete or if there was an error encountered.
///
- (void)loadWithSfml:(NSData * _Nonnull)sfml headerView:(UIView * _Nullable)headerView footerView:(UIView * _Nullable)footerView titlePreload:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))titlePreload completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Scrolls the scroll view to the view with the given anchor ID.
/// \param anchorID The desired anchorID to scroll to.
///
/// \param animated Whether the scroll action should be animated.
///
- (void)scrollToAnchorWithAnchorID:(NSInteger)anchorID animated:(BOOL)animated;
/// Scrolls and zooms the scroll view to an item with the given ID.
/// \param id The id of the desired item to scroll and zoom to.
///
- (void)scrollAndZoomToItemWithID:(SFMLItemID * _Nonnull)id;
/// Scrolls and zooms the scroll view to an item with the given ID while
/// handling and offset due to a view covering a portion of the scrollview
/// \param id The id of the desired item to scroll and zoom to.
///
/// \param bottomOffset The height of the covering view
///
- (void)scrollAndZoomToItemWithID:(SFMLItemID * _Nonnull)id bottomOffset:(CGFloat)bottomOffset;
/// Scrolls and zooms the scroll view to an item with the given ID.
/// \param globalID globalID string of the desired item to scroll and zoom to.
///
- (void)scrollAndZoomToItemWithGlobalID:(NSString * _Nonnull)globalID;
/// Scrolls and zooms the scroll view to an item with the given globalID while
/// handling and offset due to a view covering a portion of the scrollview
/// \param globalID globalID string of the desired item to scroll and zoom to.
///
/// \param bottomOffset The height of the covering view
///
- (void)scrollAndZoomToItemWithGlobalID:(NSString * _Nonnull)globalID bottomOffset:(CGFloat)bottomOffset;
/// Adds an interaction to the document view.
/// important:
/// Because the interaction gets set on the underlying document, this method must be called after the document is loaded.
/// note:
/// Keep in mind that interactions such as <code>UIContextMenuInteraction</code> may take precedence over gestures like long press.
- (void)addInteraction:(id <UIInteraction> _Nonnull)interaction SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Adds clipping annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be added for.
///
/// \param animated Whether the views should be animated. If <code>true</code>, the
/// <code>insertAnnotationView(animated:)</code> method of each <code>SFMLAnnotationView</code> view is called.
///
- (void)addClippingAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs animated:(BOOL)animated;
/// Adds coupon annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be added for.
///
- (void)addCouponAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs;
/// Removes clipping annotations for the given source item IDs.
/// \param itemIDs The item IDs clipping annotations should be removed for.
///
/// \param animated Whether the removal of views should be animated or not.
///
- (void)removeClippingAnnotationsWithItemIDs:(NSSet<SFMLItemID *> * _Nonnull)itemIDs animated:(BOOL)animated;
/// Restores accessibility focus on the most recently focused accessibility
/// element if not nil. Call this when the <code>SFMLView</code> becomes “visible” again.
/// For example when its view controller is the top view controller again
/// (e.g. on view life cycle methods) or when a temporary view that was on
/// top of <code>SFMLView</code> is dismissed.
- (void)restoreFocusOnPreviouslyFocusedAccessibilityElement;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface SFMLView (SWIFT_EXTENSION(SFMLStatic)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@class UIScrollView;

@interface SFMLView (SWIFT_EXTENSION(SFMLStatic)) <UIScrollViewDelegate>
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidScrollToTop:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// :nodoc:
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


/// Objects conforming to this protocol are notified of analytics events. After
/// these methods are called, the object is free to send any relevant information
/// to the desired analytics service.
SWIFT_PROTOCOL("_TtP10SFMLStatic25SFMLViewAnalyticsDelegate_")
@protocol SFMLViewAnalyticsDelegate <NSObject>
/// Notifies the delegate that the view has become visible. This is not called if the
/// view has not successfully loaded.
/// \param view The <code>StorefrontSFMLView</code>.
///
- (void)sfmlViewDidOpenAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view;
/// Notifies the delegate that an engaged visit event was triggered. This event
/// is only triggered once per “visible” session. When <code>isVisible</code> is to <code>false</code>,
/// the engaged visit throttle is reset and the next time <code>isVisible</code> is <code>true</code>,
/// and engaged visit event will trigger.
/// Currently the following events trigger an engaged visit:
/// <ul>
///   <li>
///     Waiting for <<code>engagedVisitDelay</code>> after load and not interacting with the view
///   </li>
///   <li>
///     Interacting with the view (scrolling, zooming, tapping/long pressing on an item
///   </li>
/// </ul>
/// \param view The <code>StorefrontSFMLView</code>.
///
- (void)sfmlViewEngagedVisitAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view;
/// Asks the delegate if there are any insets to consider which obscure the top or bottom of the
/// <code>StorefrontSFMLView</code>. This is called when the analytics component is about to start calculating
/// item impressions, and is used to get a more accurate viewport size.
/// \param view The <code>StorefrontSFMLView</code> who might have other views overlaid on top obscuring its
/// top or bottom.
///
- (UIEdgeInsets)additionalViewportInsetsForSFMLView:(StorefrontSFMLView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate that an item impressions event was triggered. This event
/// is triggered when a certain amount of time has passed after the <code>SFMLView</code>
/// has stopped scrolling or hasn’t been interacted with. See <code>AnalyticsManager</code>
/// to view or change the duration.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param visibleItemIDs A set containing the ID of items on the screen.
/// An item is considered to be on screen if 50% or more of it is visible or
/// if it takes up 50% or more of the viewport.
///
- (void)sfmlViewItemImpressionsAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view visibleItemIDs:(NSSet<SFMLItemID *> * _Nonnull)visibleItemIDs;
/// Notifies the delegate that an item viewable impressions event was triggered. This event
/// is triggered when a certain amount of time has passed after the <code>SFMLView</code>
/// has stopped scrolling or hasn’t been interacted with. See <code>AnalyticsManager</code>
/// to view or change the duration.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param visibleItemIDs A set containing the ID of items on the screen.
/// An item is considered to be on screen if 50% or more of it is visible or
/// if it takes up 50% or more of the viewport.
///
- (void)sfmlViewItemViewableImpressionsAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view visibleItemIDs:(NSSet<SFMLItemID *> * _Nonnull)visibleItemIDs;
/// Notifies the delegate that the wayfinder category list has become visible.
/// This event is not triggered if there are no wayfinding categories in the
/// storefront.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param highlightedCategory The name of the currently highlighted category.
///
- (void)sfmlViewWayfinderDidOpenAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view highlightedCategory:(NSString * _Nullable)highlightedCategory;
/// Notifies the delegate that a category in the wayfinder has been selected
/// by the user.
/// \param view The <code>StorefrontSFMLView</code>.
///
/// \param selectedCategory The name of the selected category.
///
- (void)sfmlViewDidSelectWayfinderCategoryAnalyticsEvent:(StorefrontSFMLView * _Nonnull)view selectedCategory:(NSString * _Nonnull)selectedCategory;
@end



@class UIColor;

/// An <code>SFMLView</code> subclass specifically for rendering a storefront. It differs from
/// a normal <code>SFMLView</code> by including wayfinding functionality. Please see <code>SFMLView</code>
/// documentation for more information on the properties publically visible.
SWIFT_CLASS("_TtC10SFMLStatic18StorefrontSFMLView")
@interface StorefrontSFMLView : SFMLView
/// Wayfinder delegate. Set this property to be able to receive wayfindr events.
@property (nonatomic, weak) id <SFMLViewWayfinderDelegate> _Nullable wayfinderDelegate;
/// Set before calling <code>load(sfml:headerView:footerView:titlePreload:completion:)</code> to enable
/// or disable the wayfinder. When disabled, the wayfinder will not appear when the scroll indicator
/// is touched.
@property (nonatomic) BOOL enableWayfinder;
/// The analytics object which listens to <code>SFMLViewDelegate</code> and <code>SFMLViewWayfinderDelegate</code>
/// callbacks. Set its <code>delegate</code> property in order to listen to analytics events.
@property (nonatomic, readonly, strong) SFMLAnalytics * _Nonnull analytics;
/// A list of the categories appearing in the wayfinder. Read-only.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable wayfinderCategories;
/// The background color of the wayfinder.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderBackgroundColor;
/// The distance between the category buttons and the edges of the wayfinder
/// as well as the vertical distance between each category button.
@property (nonatomic) CGFloat wayfinderPadding;
/// The color of the categories in their normal, unselected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleColor;
/// The color of the categories in their selected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleSelectedColor;
/// The color of the categories in their highlighted state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategoryTitleHighlightedColor;
/// The background color of the categories in their selected state.
@property (nonatomic, strong) UIColor * _Nonnull wayfinderCategorySelectedColor;
/// The image for the wayfinder scroll button. The size of the default image is 34x34 pts.
@property (nonatomic, strong) UIImage * _Nullable wayfinderScrollButtonImage;
/// Scrolls the scroll view to the view with the given section title.
/// \param sectionTitle The desired sectionTitle to scroll to.
///
/// \param animated Whether the scroll action should be animated.
///
- (void)scrollToSectionWithSectionTitle:(NSString * _Nonnull)sectionTitle animated:(BOOL)animated;
/// :nodoc:
- (nonnull instancetype)initWithImageDownloadTaskProvider:(id <SFMLImageDownloadTaskProvider> _Nonnull)imageDownloadTaskProvider OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)didMoveToSuperview;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
